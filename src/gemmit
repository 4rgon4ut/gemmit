#!/bin/bash

# A wrapper for git commit to use gemmit.

# Parse command-line options.
ADD=false
PUSH=false
CONFIRM=true
TEMPLATE=""
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -a|--add) ADD=true; shift ;;
        -p|--push) PUSH=true; shift ;;
        -y) CONFIRM=false; shift ;;
        -h|--help)
            echo "Usage: gemmit [-a|--add] [-p|--push] [-y] <template>"
            echo "       gemmit [-h|--help]"
            exit 0
            ;;
        *)
            if [ -z "$TEMPLATE" ]; then
                TEMPLATE=$1
                shift
            else
                echo "Unknown option: $1"
                exit 1
            fi
            ;;
    esac
done

if [ -z "$TEMPLATE" ]; then
    echo "Usage: gemmit [-a|--add] [-p|--push] [-y] <template>"
    exit 1
fi

# Stage files if requested.
if $ADD; then
    echo "Adding all files..."
    git add .
fi

# Generate the commit message.
COMMIT_MSG=$(python3 ~/.gemmit/gemmit.py $TEMPLATE)
if [ -z "$COMMIT_MSG" ]; then
    echo "Commit message generation failed. Aborting."
    exit 1
fi

# Load settings from config file.
if [ -f "$HOME/.gemmit/config.json" ]; then
    CONFIG_JSON=$(cat "$HOME/.gemmit/config.json")
    AUTOCONFIRM=$(echo "$CONFIG_JSON" | python3 -c "import sys, json; print(json.load(sys.stdin).get('autoconfirm', False))")
    HIGHLIGHT_COLOR=$(echo "$CONFIG_JSON" | python3 -c "import sys, json; print(json.load(sys.stdin).get('highlight_color'))")
else
    AUTOCONFIRM=false
    HIGHLIGHT_COLOR=""
fi

# Set highlight color for output.
NC='\033[0m' # No Color
if [[ $HIGHLIGHT_COLOR =~ ^#[0-9a-fA-F]{6}$ ]]; then
    R=$(printf "%d" "0x${HIGHLIGHT_COLOR:1:2}")
    G=$(printf "%d" "0x${HIGHLIGHT_COLOR:3:2}")
    B=$(printf "%d" "0x${HIGHLIGHT_COLOR:5:2}")
    COLOR="\033[38;2;${R};${G};${B}m"
else
    COLOR=""
    NC=""
fi

# If not in autoconfirm mode, show the interactive prompt.
if $CONFIRM && [ "$AUTOCONFIRM" != "True" ]; then
    while true; do
        echo "--- Generated Commit Message ---"
        echo -e "${COLOR}${COMMIT_MSG}${NC}"
        echo "--------------------------------"
        read -p "Use this message? [Y]es, [E]dit, [R]egenerate, [N]o: " answer

        case $answer in
            [Yy]* )
                break
                ;;
            [Ee]* )
                # Open message in the user's default editor.
                TMP_FILE=$(mktemp)
                echo -n "$COMMIT_MSG" > "$TMP_FILE"
                ${EDITOR:-vim} "$TMP_FILE" # Fallback to vim.
                COMMIT_MSG=$(cat "$TMP_FILE")
                rm "$TMP_FILE"
                break
                ;;
            [Rr]* )
                # Get a new commit message.
                echo "Regenerating commit message..."
                COMMIT_MSG=$(python3 ~/.gemmit/gemmit.py $TEMPLATE)
                if [ -z "$COMMIT_MSG" ]; then
                    echo "Commit message generation failed. Aborting."
                    exit 1
                fi
                ;;
            [Nn]* )
                echo "Commit aborted by user."
                exit 1
                ;;
            * )
                echo "Invalid input. Please enter Y, E, R, or N."
                ;;
        esac
    done
fi

# Commit and push if requested.
git commit -m "$COMMIT_MSG"
if $PUSH; then
    REMOTE_NAME=$(git remote | head -n 1)
    if [ -n "$REMOTE_NAME" ]; then
        REMOTE_URL=$(git remote get-url "$REMOTE_NAME")
        echo -e "${COLOR}Pushing changes to $REMOTE_URL${NC}"
    else
        echo -e "${COLOR}Pushing changes...${NC}"
    fi
    git push
fi
