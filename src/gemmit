#!/bin/bash

# A wrapper for git commit to use gemmit.

# Usage:
# gemmit [-a|--add] [-p|--push] [-y] <template>
# gemmit [-h|--help]

ADD=false
PUSH=false
CONFIRM=true
TEMPLATE=""

while [[ "$#" -gt 0 ]]; do
    case $1 in
        -a|--add) ADD=true; shift ;;
        -p|--push) PUSH=true; shift ;;
        -y) CONFIRM=false; shift ;;
        -h|--help)
            echo "Usage: gemmit [-a|--add] [-p|--push] [-y] <template>"
            echo "       gemmit [-h|--help]"
            echo ""
            echo "Options:"
            echo "  -a, --add    Stage all tracked files before committing."
            echo "  -p, --push   Push changes to the remote repository after committing."
            echo "  -h, --help   Show this help message."
            echo "  -y           Automatically use the generated commit message without confirmation."
            exit 0
            ;;
        *)
            if [ -z "$TEMPLATE" ]; then
                TEMPLATE=$1
                shift
            else
                echo "Unknown option: $1"
                exit 1
            fi
            ;;
    esac
done

if [ -z "$TEMPLATE" ]; then
    echo "Usage: gemmit [-a|--add] [-p|--push] [-y] <template>"
    exit 1
fi

if $ADD; then
    echo "Adding all files..."
    git add .
fi

COMMIT_MSG=$(~/.gemmit/gemmit.py $TEMPLATE)

if [ -z "$COMMIT_MSG" ]; then
    echo "Commit message generation failed. Aborting."
    exit 1
fi

if $CONFIRM; then
    echo "--- Generated Commit Message ---"
    echo "$COMMIT_MSG"
    echo "--------------------------------"
    read -p "Use this commit message? [Y/n] " answer
    if [[ "$answer" =~ ^[nN]$ ]]; then
        echo "Commit aborted by user."
        exit 1
    fi
fi

git commit -m "$COMMIT_MSG"

if $PUSH; then
    echo "Pushing changes..."
    git push
fi
